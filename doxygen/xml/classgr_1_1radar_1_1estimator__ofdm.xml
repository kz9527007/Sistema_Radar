<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classgr_1_1radar_1_1estimator__ofdm" kind="class" language="C++" prot="public">
    <compoundname>gr::radar::estimator_ofdm</compoundname>
    <basecompoundref prot="public" virt="virtual">block</basecompoundref>
    <derivedcompoundref refid="classgr_1_1radar_1_1estimator__ofdm__impl" prot="public" virt="non-virtual">gr::radar::estimator_ofdm_impl</derivedcompoundref>
    <includes refid="estimator__ofdm_8h" local="no">estimator_ofdm.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classgr_1_1radar_1_1estimator__ofdm_1ab71bb6c2553a4e78ee95aed99e25d26d" prot="public" static="no">
        <type>boost::shared_ptr&lt; <ref refid="classgr_1_1radar_1_1estimator__ofdm" kindref="compound">estimator_ofdm</ref> &gt;</type>
        <definition>typedef boost::shared_ptr&lt;estimator_ofdm&gt; gr::radar::estimator_ofdm::sptr</definition>
        <argsstring></argsstring>
        <name>sptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/parallels/gr-radar/include/radar/estimator_ofdm.h" line="48" column="1" bodyfile="/home/parallels/gr-radar/include/radar/estimator_ofdm.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgr_1_1radar_1_1estimator__ofdm_1adafaa616aefc1c50264b632b7697cab1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classgr_1_1radar_1_1estimator__ofdm_1ab71bb6c2553a4e78ee95aed99e25d26d" kindref="member">sptr</ref></type>
        <definition>static sptr gr::radar::estimator_ofdm::make</definition>
        <argsstring>(std::string symbol_x, int len_x, std::vector&lt; float &gt; axis_x, std::string symbol_y, int len_y, std::vector&lt; float &gt; axis_y, bool merge_consecutive=true)</argsstring>
        <name>make</name>
        <param>
          <type>std::string</type>
          <declname>symbol_x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len_x</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>axis_x</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>symbol_y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len_y</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt;</type>
          <declname>axis_y</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>merge_consecutive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Return a shared_ptr to a new instance of <ref refid="classgr_1_1radar_1_1estimator__ofdm" kindref="compound">radar::estimator_ofdm</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>To avoid accidental use of raw pointers, <ref refid="classgr_1_1radar_1_1estimator__ofdm" kindref="compound">radar::estimator_ofdm</ref>&apos;s constructor is in a private implementation class. <ref refid="classgr_1_1radar_1_1estimator__ofdm_1adafaa616aefc1c50264b632b7697cab1" kindref="member">radar::estimator_ofdm::make</ref> is the public interface for creating new instances. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/parallels/gr-radar/include/radar/estimator_ofdm.h" line="58" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This block evaluates the peaks given from a OFDM matrix. Input are the bins of the peaks with the identifiers &apos;axis_x&apos; and &apos;axis_y&apos;. The parameters of the block axis_x and axis_y are vectors which define the mapping of the axis. If two values are given it is assumed a linear progression in between. If four values are given the middle values are set on half of the axis and it is interpolated linear in between. len_x and len_y gives the length of the axis in number of bins. symbol_x and symbol_y defines the identifier (symbols) for the output data. merge_consecutive toggles merging consecutive peaks. Each peak is compared with peaks in a range of one bin. If there is a peak with a higher power the actual bin is not used for evaluations. If merge_consecutive is true data with identifier &apos;power&apos; is needed. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>symbol_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier (symbol) for information on x axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of x axis in bins </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis_x</parametername>
</parameternamelist>
<parameterdescription>
<para>Axis x </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier (symbol) for information on y axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of y axis in bins </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axis_y</parametername>
</parameternamelist>
<parameterdescription>
<para>Axis y </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>merge_consecutive</parametername>
</parameternamelist>
<parameterdescription>
<para>Merge consecutive peaks </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="48">
        <label>gr::radar::estimator_ofdm</label>
        <link refid="classgr_1_1radar_1_1estimator__ofdm"/>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>block</label>
      </node>
      <node id="50">
        <label>gr::radar::estimator_ofdm_impl</label>
        <link refid="classgr_1_1radar_1_1estimator__ofdm__impl"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="51">
        <label>gr::radar::estimator_ofdm</label>
        <link refid="classgr_1_1radar_1_1estimator__ofdm"/>
        <childnode refid="52" relation="public-inheritance">
        </childnode>
      </node>
      <node id="52">
        <label>block</label>
      </node>
    </collaborationgraph>
    <location file="/home/parallels/gr-radar/include/radar/estimator_ofdm.h" line="46" column="1" bodyfile="/home/parallels/gr-radar/include/radar/estimator_ofdm.h" bodystart="45" bodyend="59"/>
    <listofallmembers>
      <member refid="classgr_1_1radar_1_1estimator__ofdm_1adafaa616aefc1c50264b632b7697cab1" prot="public" virt="non-virtual"><scope>gr::radar::estimator_ofdm</scope><name>make</name></member>
      <member refid="classgr_1_1radar_1_1estimator__ofdm_1ab71bb6c2553a4e78ee95aed99e25d26d" prot="public" virt="non-virtual"><scope>gr::radar::estimator_ofdm</scope><name>sptr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
